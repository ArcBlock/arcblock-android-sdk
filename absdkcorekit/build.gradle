apply plugin: 'com.android.library'
apply plugin: 'com.apollographql.android'
apply plugin: 'maven-publish'
// 发布maven配置
apply plugin: 'maven'

version = new File(rootDir.getAbsolutePath()+'/version').text.replace("\n", "")

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName version
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    // ViewModel and LiveData
    def lifecycle_version = "1.1.1"
    api "android.arch.lifecycle:extensions:$lifecycle_version"
    api "android.arch.lifecycle:runtime:$lifecycle_version"
    annotationProcessor "android.arch.lifecycle:compiler:$lifecycle_version"

    // apollo library
    def apolloReleaseVersion = "1.0.0-alpha"
    api "com.apollographql.apollo:apollo-runtime:$apolloReleaseVersion"
    api "com.apollographql.apollo:apollo-android-support:$apolloReleaseVersion"
    api "com.apollographql.apollo:apollo-rx2-support:$apolloReleaseVersion"

    // other libraries
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'
    api 'com.jakewharton.timber:timber:4.7.0'
    implementation 'com.google.code.gson:gson:2.8.5'

    // socket
    api files('libs/jackson-annotations-2.8.3.jar')
    api files('libs/jackson-core-2.8.3.jar')
    api files('libs/jackson-databind-2.8.3.jar')
}

// update these next lines to fit your submodule
group = 'com.arcblock.corekit'

// Add sources as an artifact
task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "source"
}

// Loop over all variants
android.libraryVariants.all { variant ->
    variant.outputs.all { output ->
        println output.name
        if (!output.name.equalsIgnoreCase('debug')) {
            // This creates a publication for each variant
            publishing.publications.create(variant.name, MavenPublication) {
                // The sources artifact from earlier
                artifact sourceJar

                // Variant dependent artifact, e.g. release, debug
                artifact source: output.outputFile, classifier: output.name

                // Go through all the dependencies for each variant and add them to the POM
                // file as dependencies
                pom.withXml {
                    def dependencies = asNode().appendNode('dependencies')

                    // Filter out anything that's not an external dependency. You shouldn't
                    // be publishing artifacts that depend on local (e.g. project) dependencies,
                    // but who knows...
                    configurations.getByName(variant.name + "CompileClasspath").allDependencies
                            .findAll { it instanceof ExternalDependency }
                            .each {
                        def dependency = dependencies.appendNode('dependency')

                        dependency.appendNode('groupId', it.group)
                        dependency.appendNode('artifactId', it.name)
                        dependency.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

// Ensure that the publish task depends on assembly
tasks.all { task ->
    if (task instanceof AbstractPublishToMaven) {
        task.dependsOn assemble
    }
}

publishing {
    repositories {
        maven {
            url "s3://android-docs.arcblock.io.s3.amazonaws.com/release"
            credentials(AwsCredentials) {
                accessKey project.hasProperty("AWS_S3_ACCESSKEY") ? AWS_S3_ACCESSKEY : System.getenv("AWS_S3_ACCESSKEY")
                secretKey project.hasProperty("AWS_S3_SECRETKEY") ? AWS_S3_SECRETKEY : System.getenv("AWS_S3_SECRETKEY")
            }
        }
    }
}

//uploadArchives {
//    repositories {
//        mavenDeployer {
//            pom.groupId = 'com.arcblock.corekit'
//            pom.artifactId = "absdkcorekit"
//            pom.version = "0.2.3.5"
//            pom.packaging = 'aar'
//            repository(url: uri("file://Users/naterobinson/repository"))
//        }
//    }
//}